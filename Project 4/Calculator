import numpy as np
import ArrayStack
#import BinaryTree
import ChainedHashTable
#import DLList
#import operator
import re

class Calculator:
    def __init__(self):
        self.dict = ChainedHashTable.ChainedHashTable()

    def set_variable(self, k: str, v: float):
        self.dict.add(k, v)

    def matched_expression(self, s: str) -> bool:
        stack = ArrayStack.ArrayStack()
        for j in range(len(s)):
            if s[j] == '(':
                stack.push(s[j])
            elif s[j] == ')':
                if stack.size() == 0:
                    return False
                stack.pop()
        return stack.size() == 0

    def build_parse_tree(self, exp: str) -> str:
        # todo
        pass

    def _evaluate(self, root):
        op = {'+': operator.add, '-': operator.sub, '*': operator.mul, '/': operator.truediv}
        # todo
        pass

    def evaluate(self, exp):
        parseTree = self.build_parse_tree(exp)
        return self._evaluate(parseTree.r)

    def print_expression(self, exp: str):
        variables = [x for x in re.split('\W+', exp) if x.isalnum()]
        everything_else = re.split('\w+', exp)
        for i in range (len(variables)):
            self.dict.find(variables[i])
            replace_val = self.dict.find(variables[i])
            if replace_val == None:
                pass
            else:
                variables[i] = str(replace_val)
        L = ""
        while len(variables) > 0 and len(everything_else) > 0:
            L += everything_else[0] + variables[0]
            del variables[0]
            del everything_else[0]
        while len(everything_else) > 0:
            L += everything_else[0]
            del everything_else[0]
        print(L)


        '''for i in range(len(self.dict.t)):
            for j in range(self.dict.t[i].size()):
                node = self.dict.t[i].get(j)
                exp = exp.replace(node.key, str(node.value))
        print(exp)
        return exp'''
